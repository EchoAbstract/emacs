;;; 00-faces.el --- Face customization -*- lexical-binding: t; -*-
;;
;; Copyright (c) 2018 Brian Wilson <brian@polytopes.me>
;;
;; Author: Brian Wilson <brian@polytopes.me>
;; URL: https://gihub.com/EchoAbstract/emacs
;; Keywords: convenience

;; This file is not part of GNU Emacs.

;; This program is free software; you can redistribute it and/or modify it under
;; the terms of the GNU General Public License as published by the Free Software
;; Foundation; either version 3 of the License, or (at your option) any later
;; version.

;; This program is distributed in the hope that it will be useful, but WITHOUT
;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
;; FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
;; details.

;; You should have received a copy of the GNU General Public License along with
;; GNU Emacs; see the file COPYING.  If not, write to the Free Software
;; Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
;; USA.

;;; Commentary:

;; TODO

;;; Code:

;;; Custom Faces

(defface interface-variable-pitch '()
  "Variable pitch font for interface elements."
  :group 'init)

(defface todo-low '()
  "Face for TODOs that are informational."
  :group 'init)

(defface todo-medium '()
  "Face for TODOs that are pretty important."
  :group 'init)

(defface todo-high '()
  "Face for TODOs that are incredibly important."
  :group 'init)

;;; Functions of dubious value...

(defun baw-remove-frame-background ()
  "Remove the background color for the current frame."
  (interactive)
  (set-face-background 'default "unspecified-bg" (selected-frame)))


(defvar *baw-last-enabled-theme*
  nil
  "The last theme that was enabled.")

(defun baw-load-theme-advice (f theme &optional no-confirm no-enable)
  "Wraps F by disabling last theme before enabling THEME.

Pases NO-CONFIRM and NO-ENABLE to `load-theme'."
  (message (format "Disabling %s and enabling %s" *baw-last-enabled-theme* theme))
  (unless (null *baw-last-enabled-theme*)
    (disable-theme *baw-last-enabled-theme*))

  (setq *baw-last-enabled-theme* theme)
  (apply f theme no-confirm no-enable))

(advice-add 'load-theme
            :around
            #'baw-load-theme-advice)

;;;; Basic TODO Support
(defvar *baw/fixme-modes*
  '(c++-mode c-mode emacs-lisp-mode)
  "List of major modes to fontify TODO/NOTE Marks.")

;; compilation-warning, compilation-info, compilation-error
(defun baw/add-todo-faces ()
  "Add my faces to specific modes."
  (mapc (lambda (mode)
          (font-lock-add-keywords
           mode
           '(("\\<\\(NOTE\\s-*?\\(?:\\s(\\sw+?\\s)\\)?\\s*?:\\)" 1 'todo-low t)
             ("\\<\\(TODO\\s-*?\\(?:\\s(\\sw+?\\s)\\)?\\s*?:\\)" 1 'todo-medium t)
             ("\\<\\(FIXME\\s-*?\\(?:\\s(\\sw+?\\s)\\)?\\s*?:\\)" 1 'todo-high t)
             ("\\<\\(BUG\\s-*?\\(?:\\s(\\sw+?\\s)\\)?\\s*?:\\)" 1 'todo-high t))))
        *baw/fixme-modes*))

(add-hook 'after-init-hook #'baw/add-todo-faces)

;; TODO (brian): This is a sample todo
;; TODO: Also, this
;; NOTE (brian): This is a sample note
;; NOTE: Also this
;; FIXME (brian): This is a sample FIXME
;; FIXME: Also, this
;; BUG (brian): This is a sample BUG
;; BUG: Also this

(defun init/safe-set-face-font (face font-family font-size)
  "Set the font for FACE to FONT-FAMILY (with FONT-SIZE) if it exists."
  (when (member font-family (font-family-list))
    (set-face-font face (concat font-family "-" (number-to-string font-size)))))

(defun init/color-string (tag)
  "Get the color string for TAG."
  (cond ((eq tag 'fg) "#333333")
        ((eq tag 'bg) "#eeeeee")
        ((eq tag 'bg-light) "#333333")
        ((eq tag 'fg-light) "#eeeeee")
        ((eq tag 'shade) "light grey")
        ((eq tag 'bg-highlight) "#ddddda")
        ((eq tag 'bg-highlight-2) "#eeeee8")
        ((eq tag 'bg-highlight-3) "#faf0fc")
        ((eq tag 'macOS-highlight) "#b4d0f4")
        ((eq tag 'white) "#ffffff")
        ((eq tag 'black) "#000000")
        ((eq tag 'black) "#000000")

        ;; From: https://coolors.co/2364aa-3da5d9-73bfb8-fec601-ea7317
        ((eq tag 'color-scheme-accent)    "#2364AA")
        ((eq tag 'color-scheme-highlight) "#3DA5D9")
        ((eq tag 'color-scheme-good)      "#73BFB8")
        ((eq tag 'color-scheme-neutral)   "#FEC601")
        ((eq tag 'color-scheme-bad)       "#EA7317")

        (t
         "#ff0000")))


;;; Face definitions
(defun init/set-my-faces ()
  "Setup my desired faces."
  (interactive)
  (let ((fg (init/color-string 'fg))
        (bg (init/color-string 'bg))
        (shade (init/color-string 'shade))
        (highlight (init/color-string 'macOS-highlight))
        (mu4e-unread (init/color-string 'color-scheme-good))
        (mu4e-marked (init/color-string 'color-scheme-bad))
        (mu4e-moved (init/color-string 'color-scheme-neutral))
        (good (init/color-string 'color-scheme-good))
        (neutral (init/color-string 'color-scheme-neutral))
        (bad (init/color-string 'color-scheme-bad)))

    (custom-set-faces
     `(default ((t (:background ,bg :foreground ,fg))))

     ;; Mode line
     `(mode-line ((t (:background ,shade :foreground ,fg :box (:line-width 2 :color ,highlight) :inherit 'interface-variable-pitch))))
     `(mode-line-buffer-id ((t (:foreground ,fg :weight ultra-bold :slant italic))))
     `(mode-line-emphasis ((t ())))
     `(mode-line-highlight ((t (:foreground ,highlight :weight bold :slant italic :box (:line-width 1 :color ,highlight)))))
     `(mode-line-inactive ((t (:background ,bg :foreground ,fg :box (:line-width 1)))))

     `(fringe ((t (:foreground ,fg :background ,bg))))


     `(minibuffer-prompt ((t (:fg ,fg :weight ultra-bold :slant italic :inherit 'interface-variable-pitch))))

     `(highlight ((t (:background ,highlight))))
     `(hl-line ((t (:background ,highlight))))

     ;; Todo Stuffs
     `(todo-low ((t (:foreground ,good))))
     `(todo-medium ((t (:foreground ,neutral))))
     `(todo-high ((t (:foreground ,bad))))

     ;;; mu4e
     ;; `(mu4e-attach-number-face ((t ())))
     ;; `(mu4e-cited-1-face ((t ())))
     ;; `(mu4e-cited-2-face ((t ())))
     ;; `(mu4e-cited-3-face ((t ())))
     ;; `(mu4e-cited-4-face ((t ())))
     ;; `(mu4e-cited-5-face ((t ())))
     ;; `(mu4e-cited-6-face ((t ())))
     ;; `(mu4e-cited-7-face ((t ())))
     ;; `(mu4e-compose-header-face ((t ())))
     ;; `(mu4e-compose-separator-face ((t ())))
     ;; `(mu4e-contact-face ((t ())))
     ;; `(mu4e-context-face ((t ())))
     ;; `(mu4e-draft-face ((t ())))
     ;; `(mu4e-flagged-face ((t ())))
     ;; `(mu4e-footer-face ((t ())))
     ;; `(mu4e-forwarded-face ((t ())))
     ;; `(mu4e-header-face ((t ())))
     ;; `(mu4e-header-highlight-face ((t ())))
     ;; `(mu4e-header-key-face ((t ())))
     `(mu4e-header-marks-face ((t (:foregrounde ,mu4e-marked))))
     ;; `(mu4e-header-title-face ((t ())))
     ;; `(mu4e-header-value-face ((t ())))
     ;; `(mu4e-highlight-face ((t ())))
     ;; `(mu4e-link-face ((t ())))
     ;; `(mu4e-modeline-face ((t ())))
     `(mu4e-moved-face ((t (:foreground ,mu4e-moved :box t))))
     ;; `(mu4e-ok-face ((t ())))
     ;; `(mu4e-region-code ((t ())))
     ;; `(mu4e-replied-face ((t ())))
     ;; `(mu4e-special-header-value-face ((t ())))
     ;; `(mu4e-system-face ((t ())))
     ;; `(mu4e-title-face ((t ())))
     ;; `(mu4e-trashed-face ((t ())))
     `(mu4e-unread-face ((t (:foreground ,mu4e-unread))))
     ;; `(mu4e-url-number-face ((t ())))
     ;; `(mu4e-view-body-face ((t ())))
     ;; `(mu4e-warning-face ((t ())))

     ;; `(Info-quoted ((t ())))
     ;; `(alert-high-face ((t ())))
     ;; `(alert-low-face ((t ())))
     ;; `(alert-moderate-face ((t ())))
     ;; `(alert-normal-face ((t ())))
     ;; `(alert-saved-fringe-face ((t ())))
     ;; `(alert-trivial-face ((t ())))
     ;; `(alert-urgent-face ((t ())))
     ;; `(apropos-function-button ((t ())))
     ;; `(apropos-keybinding ((t ())))
     ;; `(apropos-misc-button ((t ())))
     ;; `(apropos-property ((t ())))
     ;; `(apropos-symbol ((t ())))
     ;; `(apropos-user-option-button ((t ())))
     ;; `(apropos-variable-button ((t ())))
     ;; `(bold ((t ())))
     ;; `(bold-italic ((t ())))
     ;; `(bookmark-menu-bookmark ((t ())))
     ;; `(bookmark-menu-heading ((t ())))
     ;; `(border ((t ())))
     ;; `(buffer-menu-buffer ((t ())))
     ;; `(button ((t ())))
     ;; `(calendar-month-header ((t ())))
     ;; `(calendar-today ((t ())))
     ;; `(calendar-weekday-header ((t ())))
     ;; `(calendar-weekend-header ((t ())))
     ;; `(change-log-acknowledgment ((t ())))
     ;; `(change-log-conditionals ((t ())))
     ;; `(change-log-date ((t ())))
     ;; `(change-log-email ((t ())))
     ;; `(change-log-file ((t ())))
     ;; `(change-log-function ((t ())))
     ;; `(change-log-list ((t ())))
     ;; `(change-log-name ((t ())))
     ;; `(comint-highlight-input ((t ())))
     ;; `(comint-highlight-prompt ((t ())))
     ;; `(company-echo ((t ())))
     ;; `(company-echo-common ((t ())))
     ;; `(company-preview ((t ())))
     ;; `(company-preview-common ((t ())))
     ;; `(company-preview-search ((t ())))
     ;; `(company-scrollbar-bg ((t ())))
     ;; `(company-scrollbar-fg ((t ())))
     ;; `(company-template-field ((t ())))
     ;; `(company-tooltip ((t ())))
     ;; `(company-tooltip-annotation ((t ())))
     ;; `(company-tooltip-annotation-selection ((t ())))
     ;; `(company-tooltip-common ((t ())))
     ;; `(company-tooltip-common-selection ((t ())))
     ;; `(company-tooltip-mouse ((t ())))
     ;; `(company-tooltip-search ((t ())))
     ;; `(company-tooltip-search-selection ((t ())))
     ;; `(company-tooltip-selection ((t ())))
     ;; `(compilation-column-number ((t ())))
     ;; `(compilation-error ((t ())))
     ;; `(compilation-info ((t ())))
     ;; `(compilation-line-number ((t ())))
     ;; `(compilation-mode-line-exit ((t ())))
     ;; `(compilation-mode-line-fail ((t ())))
     ;; `(compilation-mode-line-run ((t ())))
     ;; `(compilation-warning ((t ())))
     ;; `(completions-annotations ((t ())))
     ;; `(completions-common-part ((t ())))
     ;; `(completions-first-difference ((t ())))
     ;; `(cursor ((t ())))
     ;; `(default ((t ())))
     ;; `(diary ((t ())))
     ;; `(diff-added ((t ())))
     ;; `(diff-changed ((t ())))
     ;; `(diff-context ((t ())))
     ;; `(diff-file-header ((t ())))
     ;; `(diff-function ((t ())))
     ;; `(diff-header ((t ())))
     ;; `(diff-hunk-header ((t ())))
     ;; `(diff-index ((t ())))
     ;; `(diff-indicator-added ((t ())))
     ;; `(diff-indicator-changed ((t ())))
     ;; `(diff-indicator-removed ((t ())))
     ;; `(diff-nonexistent ((t ())))
     ;; `(diff-refine-added ((t ())))
     ;; `(diff-refine-changed ((t ())))
     ;; `(diff-refine-removed ((t ())))
     ;; `(diff-removed ((t ())))
     ;; `(dired-directory ((t ())))
     ;; `(dired-flagged ((t ())))
     ;; `(dired-header ((t ())))
     ;; `(dired-ignored ((t ())))
     ;; `(dired-mark ((t ())))
     ;; `(dired-marked ((t ())))
     ;; `(dired-perm-write ((t ())))
     ;; `(dired-symlink ((t ())))
     ;; `(dired-warning ((t ())))
     ;; `(eldoc-highlight-function-argument ((t ())))
     ;; `(epa-field-body ((t ())))
     ;; `(epa-field-name ((t ())))
     ;; `(epa-mark ((t ())))
     ;; `(epa-string ((t ())))
     ;; `(epa-validity-disabled ((t ())))
     ;; `(epa-validity-high ((t ())))
     ;; `(epa-validity-low ((t ())))
     ;; `(epa-validity-medium ((t ())))
     ;; `(error ((t ())))
     ;; `(escape-glyph ((t ())))
     ;; `(ffap ((t ())))
     ;; `(file-name-shadow ((t ())))
     ;; `(fixed-pitch ((t ())))
     ;; `(fixed-pitch-serif ((t ())))
     ;; `(flycheck-error ((t ())))
     ;; `(flycheck-error-list-checker-name ((t ())))
     ;; `(flycheck-error-list-column-number ((t ())))
     ;; `(flycheck-error-list-error ((t ())))
     ;; `(flycheck-error-list-filename ((t ())))
     ;; `(flycheck-error-list-highlight ((t ())))
     ;; `(flycheck-error-list-id ((t ())))
     ;; `(flycheck-error-list-id-with-explainer ((t ())))
     ;; `(flycheck-error-list-info ((t ())))
     ;; `(flycheck-error-list-line-number ((t ())))
     ;; `(flycheck-error-list-warning ((t ())))
     ;; `(flycheck-fringe-error ((t ())))
     ;; `(flycheck-fringe-info ((t ())))
     ;; `(flycheck-fringe-warning ((t ())))
     ;; `(flycheck-info ((t ())))
     ;; `(flycheck-warning ((t ())))
     ;; `(font-lock-builtin-face ((t ())))
     ;; `(font-lock-comment-delimiter-face ((t ())))
     ;; `(font-lock-comment-face ((t ())))
     ;; `(font-lock-constant-face ((t ())))
     ;; `(font-lock-doc-face ((t ())))
     ;; `(font-lock-function-name-face ((t ())))
     ;; `(font-lock-keyword-face ((t ())))
     ;; `(font-lock-negation-char-face ((t ())))
     ;; `(font-lock-preprocessor-face ((t ())))
     ;; `(font-lock-regexp-grouping-backslash ((t ())))
     ;; `(font-lock-regexp-grouping-construct ((t ())))
     ;; `(font-lock-string-face ((t ())))
     ;; `(font-lock-type-face ((t ())))
     ;; `(font-lock-variable-name-face ((t ())))
     ;; `(font-lock-warning-face ((t ())))
     ;; `(git-commit-comment-action ((t ())))
     ;; `(git-commit-comment-branch-local ((t ())))
     ;; `(git-commit-comment-branch-remote ((t ())))
     ;; `(git-commit-comment-detached ((t ())))
     ;; `(git-commit-comment-file ((t ())))
     ;; `(git-commit-comment-heading ((t ())))
     ;; `(git-commit-known-pseudo-header ((t ())))
     ;; `(git-commit-nonempty-second-line ((t ())))
     ;; `(git-commit-note ((t ())))
     ;; `(git-commit-overlong-summary ((t ())))
     ;; `(git-commit-pseudo-header ((t ())))
     ;; `(git-commit-summary ((t ())))
     ;; `(glyphless-char ((t ())))
     ;; `(gnus-group-mail-1 ((t ())))
     ;; `(gnus-group-mail-1-empty ((t ())))
     ;; `(gnus-group-mail-2 ((t ())))
     ;; `(gnus-group-mail-2-empty ((t ())))
     ;; `(gnus-group-mail-3 ((t ())))
     ;; `(gnus-group-mail-3-empty ((t ())))
     ;; `(gnus-group-mail-low ((t ())))
     ;; `(gnus-group-mail-low-empty ((t ())))
     ;; `(gnus-group-news-1 ((t ())))
     ;; `(gnus-group-news-1-empty ((t ())))
     ;; `(gnus-group-news-2 ((t ())))
     ;; `(gnus-group-news-2-empty ((t ())))
     ;; `(gnus-group-news-3 ((t ())))
     ;; `(gnus-group-news-3-empty ((t ())))
     ;; `(gnus-group-news-4 ((t ())))
     ;; `(gnus-group-news-4-empty ((t ())))
     ;; `(gnus-group-news-5 ((t ())))
     ;; `(gnus-group-news-5-empty ((t ())))
     ;; `(gnus-group-news-6 ((t ())))
     ;; `(gnus-group-news-6-empty ((t ())))
     ;; `(gnus-group-news-low ((t ())))
     ;; `(gnus-group-news-low-empty ((t ())))
     ;; `(gnus-splash ((t ())))
     ;; `(gnus-summary-cancelled ((t ())))
     ;; `(gnus-summary-high-ancient ((t ())))
     ;; `(gnus-summary-high-read ((t ())))
     ;; `(gnus-summary-high-ticked ((t ())))
     ;; `(gnus-summary-high-undownloaded ((t ())))
     ;; `(gnus-summary-high-unread ((t ())))
     ;; `(gnus-summary-low-ancient ((t ())))
     ;; `(gnus-summary-low-read ((t ())))
     ;; `(gnus-summary-low-ticked ((t ())))
     ;; `(gnus-summary-low-undownloaded ((t ())))
     ;; `(gnus-summary-low-unread ((t ())))
     ;; `(gnus-summary-normal-ancient ((t ())))
     ;; `(gnus-summary-normal-read ((t ())))
     ;; `(gnus-summary-normal-ticked ((t ())))
     ;; `(gnus-summary-normal-undownloaded ((t ())))
     ;; `(gnus-summary-normal-unread ((t ())))
     ;; `(gnus-summary-selected ((t ())))
     ;; `(header-line ((t ())))
     ;; `(help-argument-name ((t ())))
     ;; `(holiday ((t ())))
     ;; `(ido-first-match ((t ())))
     ;; `(ido-incomplete-regexp ((t ())))
     ;; `(ido-indicator ((t ())))
     ;; `(ido-only-match ((t ())))
     ;; `(ido-subdir ((t ())))
     ;; `(ido-virtual ((t ())))
     ;; `(info-header-node ((t ())))
     ;; `(info-header-xref ((t ())))
     ;; `(info-index-match ((t ())))
     ;; `(info-menu-header ((t ())))
     ;; `(info-menu-star ((t ())))
     ;; `(info-node ((t ())))
     ;; `(info-title-1 ((t ())))
     ;; `(info-title-2 ((t ())))
     ;; `(info-title-3 ((t ())))
     ;; `(info-title-4 ((t ())))
     ;; `(info-xref ((t ())))
     ;; `(info-xref-visited ((t ())))
     ;; `(isearch ((t ())))
     ;; `(isearch-fail ((t ())))
     ;; `(italic ((t ())))
     ;; `(ivy-action ((t ())))
     ;; `(ivy-confirm-face ((t ())))
     ;; `(ivy-current-match ((t ())))
     ;; `(ivy-cursor ((t ())))
     ;; `(ivy-highlight-face ((t ())))
     ;; `(ivy-match-required-face ((t ())))
     ;; `(ivy-minibuffer-match-face-1 ((t ())))
     ;; `(ivy-minibuffer-match-face-2 ((t ())))
     ;; `(ivy-minibuffer-match-face-3 ((t ())))
     ;; `(ivy-minibuffer-match-face-4 ((t ())))
     ;; `(ivy-minibuffer-match-highlight ((t ())))
     ;; `(ivy-modified-buffer ((t ())))
     ;; `(ivy-prompt-match ((t ())))
     ;; `(ivy-remote ((t ())))
     ;; `(ivy-subdir ((t ())))
     ;; `(ivy-virtual ((t ())))
     ;; `(lazy-highlight ((t ())))
     ;; `(link ((t ())))
     ;; `(link-visited ((t ())))
     ;; `(log-edit-header ((t ())))
     ;; `(log-edit-summary ((t ())))
     ;; `(log-edit-unknown-header ((t ())))
     ;; `(magit-bisect-bad ((t ())))
     ;; `(magit-bisect-good ((t ())))
     ;; `(magit-bisect-skip ((t ())))
     ;; `(magit-blame-date ((t ())))
     ;; `(magit-blame-hash ((t ())))
     ;; `(magit-blame-heading ((t ())))
     ;; `(magit-blame-name ((t ())))
     ;; `(magit-blame-summary ((t ())))
     ;; `(magit-branch-current ((t ())))
     ;; `(magit-branch-local ((t ())))
     ;; `(magit-branch-remote ((t ())))
     ;; `(magit-branch-remote-head ((t ())))
     ;; `(magit-cherry-equivalent ((t ())))
     ;; `(magit-cherry-unmatched ((t ())))
     ;; `(magit-diff-added ((t ())))
     ;; `(magit-diff-added-highlight ((t ())))
     ;; `(magit-diff-base ((t ())))
     ;; `(magit-diff-base-highlight ((t ())))
     ;; `(magit-diff-conflict-heading ((t ())))
     ;; `(magit-diff-context ((t ())))
     ;; `(magit-diff-context-highlight ((t ())))
     ;; `(magit-diff-file-heading ((t ())))
     ;; `(magit-diff-file-heading-highlight ((t ())))
     ;; `(magit-diff-file-heading-selection ((t ())))
     ;; `(magit-diff-hunk-heading ((t ())))
     ;; `(magit-diff-hunk-heading-highlight ((t ())))
     ;; `(magit-diff-hunk-heading-selection ((t ())))
     ;; `(magit-diff-hunk-region ((t ())))
     ;; `(magit-diff-lines-boundary ((t ())))
     ;; `(magit-diff-lines-heading ((t ())))
     ;; `(magit-diff-our ((t ())))
     ;; `(magit-diff-our-highlight ((t ())))
     ;; `(magit-diff-removed ((t ())))
     ;; `(magit-diff-removed-highlight ((t ())))
     ;; `(magit-diff-their ((t ())))
     ;; `(magit-diff-their-highlight ((t ())))
     ;; `(magit-diff-whitespace-warning ((t ())))
     ;; `(magit-diffstat-added ((t ())))
     ;; `(magit-diffstat-removed ((t ())))
     ;; `(magit-dimmed ((t ())))
     ;; `(magit-filename ((t ())))
     ;; `(magit-hash ((t ())))
     ;; `(magit-head ((t ())))
     ;; `(magit-header-line ((t ())))
     ;; `(magit-header-line-key ((t ())))
     ;; `(magit-header-line-log-select ((t ())))
     ;; `(magit-keyword ((t ())))
     ;; `(magit-log-author ((t ())))
     ;; `(magit-log-date ((t ())))
     ;; `(magit-log-graph ((t ())))
     ;; `(magit-mode-line-process ((t ())))
     ;; `(magit-mode-line-process-error ((t ())))
     ;; `(magit-popup-argument ((t ())))
     ;; `(magit-popup-disabled-argument ((t ())))
     ;; `(magit-popup-heading ((t ())))
     ;; `(magit-popup-key ((t ())))
     ;; `(magit-popup-option-value ((t ())))
     ;; `(magit-process-ng ((t ())))
     ;; `(magit-process-ok ((t ())))
     ;; `(magit-reflog-amend ((t ())))
     ;; `(magit-reflog-checkout ((t ())))
     ;; `(magit-reflog-cherry-pick ((t ())))
     ;; `(magit-reflog-commit ((t ())))
     ;; `(magit-reflog-merge ((t ())))
     ;; `(magit-reflog-other ((t ())))
     ;; `(magit-reflog-rebase ((t ())))
     ;; `(magit-reflog-remote ((t ())))
     ;; `(magit-reflog-reset ((t ())))
     ;; `(magit-refname ((t ())))
     ;; `(magit-refname-stash ((t ())))
     ;; `(magit-refname-wip ((t ())))
     ;; `(magit-section-heading ((t ())))
     ;; `(magit-section-heading-selection ((t ())))
     ;; `(magit-section-highlight ((t ())))
     ;; `(magit-section-secondary-heading ((t ())))
     ;; `(magit-sequence-done ((t ())))
     ;; `(magit-sequence-drop ((t ())))
     ;; `(magit-sequence-exec ((t ())))
     ;; `(magit-sequence-head ((t ())))
     ;; `(magit-sequence-onto ((t ())))
     ;; `(magit-sequence-part ((t ())))
     ;; `(magit-sequence-pick ((t ())))
     ;; `(magit-sequence-stop ((t ())))
     ;; `(magit-signature-bad ((t ())))
     ;; `(magit-signature-error ((t ())))
     ;; `(magit-signature-expired ((t ())))
     ;; `(magit-signature-expired-key ((t ())))
     ;; `(magit-signature-good ((t ())))
     ;; `(magit-signature-revoked ((t ())))
     ;; `(magit-signature-untrusted ((t ())))
     ;; `(magit-tag ((t ())))
     ;; `(markdown-blockquote-face ((t ())))
     ;; `(markdown-bold-face ((t ())))
     ;; `(markdown-code-face ((t ())))
     ;; `(markdown-comment-face ((t ())))
     ;; `(markdown-footnote-marker-face ((t ())))
     ;; `(markdown-footnote-text-face ((t ())))
     ;; `(markdown-gfm-checkbox-face ((t ())))
     ;; `(markdown-header-delimiter-face ((t ())))
     ;; `(markdown-header-face ((t ())))
     ;; `(markdown-header-face-1 ((t ())))
     ;; `(markdown-header-face-2 ((t ())))
     ;; `(markdown-header-face-3 ((t ())))
     ;; `(markdown-header-face-4 ((t ())))
     ;; `(markdown-header-face-5 ((t ())))
     ;; `(markdown-header-face-6 ((t ())))
     ;; `(markdown-header-rule-face ((t ())))
     ;; `(markdown-highlight-face ((t ())))
     ;; `(markdown-hr-face ((t ())))
     ;; `(markdown-html-attr-name-face ((t ())))
     ;; `(markdown-html-attr-value-face ((t ())))
     ;; `(markdown-html-entity-face ((t ())))
     ;; `(markdown-html-tag-delimiter-face ((t ())))
     ;; `(markdown-html-tag-name-face ((t ())))
     ;; `(markdown-inline-code-face ((t ())))
     ;; `(markdown-italic-face ((t ())))
     ;; `(markdown-language-info-face ((t ())))
     ;; `(markdown-language-keyword-face ((t ())))
     ;; `(markdown-line-break-face ((t ())))
     ;; `(markdown-link-face ((t ())))
     ;; `(markdown-link-title-face ((t ())))
     ;; `(markdown-list-face ((t ())))
     ;; `(markdown-markup-face ((t ())))
     ;; `(markdown-math-face ((t ())))
     ;; `(markdown-metadata-key-face ((t ())))
     ;; `(markdown-metadata-value-face ((t ())))
     ;; `(markdown-missing-link-face ((t ())))
     ;; `(markdown-plain-url-face ((t ())))
     ;; `(markdown-pre-face ((t ())))
     ;; `(markdown-reference-face ((t ())))
     ;; `(markdown-strike-through-face ((t ())))
     ;; `(markdown-table-face ((t ())))
     ;; `(markdown-url-face ((t ())))
     ;; `(match ((t ())))
     ;; `(menu ((t ())))
     ;; `(message-cited-text ((t ())))
     ;; `(message-header-cc ((t ())))
     ;; `(message-header-name ((t ())))
     ;; `(message-header-newsgroups ((t ())))
     ;; `(message-header-other ((t ())))
     ;; `(message-header-subject ((t ())))
     ;; `(message-header-to ((t ())))
     ;; `(message-header-xheader ((t ())))
     ;; `(message-mml ((t ())))
     ;; `(message-separator ((t ())))
     ;; `(minibuffer-prompt ((t ())))
     ;; `(mm-command-output ((t ())))
     ;; `(mouse ((t ())))
     ;; `(next-error ((t ())))
     ;; `(nobreak-space ((t ())))
     ;; `(ns-working-text-face ((t ())))
     ;; `(org-agenda-calendar-event ((t ())))
     ;; `(org-agenda-calendar-sexp ((t ())))
     ;; `(org-agenda-clocking ((t ())))
     ;; `(org-agenda-column-dateline ((t ())))
     ;; `(org-agenda-current-time ((t ())))
     ;; `(org-agenda-date ((t ())))
     ;; `(org-agenda-date-today ((t ())))
     ;; `(org-agenda-date-weekend ((t ())))
     ;; `(org-agenda-diary ((t ())))
     ;; `(org-agenda-dimmed-todo-face ((t ())))
     ;; `(org-agenda-done ((t ())))
     ;; `(org-agenda-filter-category ((t ())))
     ;; `(org-agenda-filter-effort ((t ())))
     ;; `(org-agenda-filter-regexp ((t ())))
     ;; `(org-agenda-filter-tags ((t ())))
     ;; `(org-agenda-restriction-lock ((t ())))
     ;; `(org-agenda-structure ((t ())))
     ;; `(org-archived ((t ())))
     ;; `(org-block ((t ())))
     ;; `(org-block-begin-line ((t ())))
     ;; `(org-block-end-line ((t ())))
     ;; `(org-checkbox ((t ())))
     ;; `(org-checkbox-statistics-done ((t ())))
     ;; `(org-checkbox-statistics-todo ((t ())))
     ;; `(org-clock-overlay ((t ())))
     ;; `(org-code ((t ())))
     ;; `(org-column ((t ())))
     ;; `(org-column-title ((t ())))
     ;; `(org-date ((t ())))
     ;; `(org-date-selected ((t ())))
     ;; `(org-default ((t ())))
     ;; `(org-document-info ((t ())))
     ;; `(org-document-info-keyword ((t ())))
     ;; `(org-document-title ((t ())))
     ;; `(org-done ((t ())))
     ;; `(org-drawer ((t ())))
     ;; `(org-ellipsis ((t ())))
     ;; `(org-footnote ((t ())))
     ;; `(org-formula ((t ())))
     ;; `(org-headline-done ((t ())))
     ;; `(org-hide ((t ())))
     ;; `(org-latex-and-related ((t ())))
     ;; `(org-level-1 ((t ())))
     ;; `(org-level-2 ((t ())))
     ;; `(org-level-3 ((t ())))
     ;; `(org-level-4 ((t ())))
     ;; `(org-level-5 ((t ())))
     ;; `(org-level-6 ((t ())))
     ;; `(org-level-7 ((t ())))
     ;; `(org-level-8 ((t ())))
     ;; `(org-link ((t ())))
     ;; `(org-list-dt ((t ())))
     ;; `(org-macro ((t ())))
     ;; `(org-meta-line ((t ())))
     ;; `(org-mode-line-clock ((t ())))
     ;; `(org-mode-line-clock-overrun ((t ())))
     ;; `(org-priority ((t ())))
     ;; `(org-property-value ((t ())))
     ;; `(org-quote ((t ())))
     ;; `(org-scheduled ((t ())))
     ;; `(org-scheduled-previously ((t ())))
     ;; `(org-scheduled-today ((t ())))
     ;; `(org-sexp-date ((t ())))
     ;; `(org-special-keyword ((t ())))
     ;; `(org-table ((t ())))
     ;; `(org-tag ((t ())))
     ;; `(org-tag-group ((t ())))
     ;; `(org-target ((t ())))
     ;; `(org-time-grid ((t ())))
     ;; `(org-todo ((t ())))
     ;; `(org-upcoming-deadline ((t ())))
     ;; `(org-verbatim ((t ())))
     ;; `(org-verse ((t ())))
     ;; `(org-warning ((t ())))
     ;; `(outline-1 ((t ())))
     ;; `(outline-2 ((t ())))
     ;; `(outline-3 ((t ())))
     ;; `(outline-4 ((t ())))
     ;; `(outline-5 ((t ())))
     ;; `(outline-6 ((t ())))
     ;; `(outline-7 ((t ())))
     ;; `(outline-8 ((t ())))
     ;; `(package-description ((t ())))
     ;; `(package-help-section-name ((t ())))
     ;; `(package-name ((t ())))
     ;; `(package-status-avail-obso ((t ())))
     ;; `(package-status-available ((t ())))
     ;; `(package-status-built-in ((t ())))
     ;; `(package-status-dependency ((t ())))
     ;; `(package-status-disabled ((t ())))
     ;; `(package-status-external ((t ())))
     ;; `(package-status-held ((t ())))
     ;; `(package-status-incompat ((t ())))
     ;; `(package-status-installed ((t ())))
     ;; `(package-status-new ((t ())))
     ;; `(package-status-unsigned ((t ())))
     ;; `(query-replace ((t ())))
     ;; `(region ((t ())))
     ;; `(scroll-bar ((t ())))
     ;; `(secondary-selection ((t ())))
     ;; `(shadow ((t ())))
     ;; `(show-paren-match ((t ())))
     ;; `(show-paren-mismatch ((t ())))
     ;; `(smerge-base ((t ())))
     ;; `(smerge-markers ((t ())))
     ;; `(smerge-mine ((t ())))
     ;; `(smerge-other ((t ())))
     ;; `(smerge-refined-added ((t ())))
     ;; `(smerge-refined-changed ((t ())))
     ;; `(smerge-refined-removed ((t ())))
     ;; `(speedbar-button-face ((t ())))
     ;; `(speedbar-directory-face ((t ())))
     ;; `(speedbar-file-face ((t ())))
     ;; `(speedbar-highlight-face ((t ())))
     ;; `(speedbar-selected-face ((t ())))
     ;; `(speedbar-separator-face ((t ())))
     ;; `(speedbar-tag-face ((t ())))
     ;; `(success ((t ())))
     ;; `(swiper-line-face ((t ())))
     ;; `(swiper-match-face-1 ((t ())))
     ;; `(swiper-match-face-2 ((t ())))
     ;; `(swiper-match-face-3 ((t ())))
     ;; `(swiper-match-face-4 ((t ())))
     ;; `(tool-bar ((t ())))
     ;; `(tooltip ((t ())))
     ;; `(trailing-whitespace ((t ())))
     ;; `(tty-menu-disabled-face ((t ())))
     ;; `(tty-menu-enabled-face ((t ())))
     ;; `(tty-menu-selected-face ((t ())))
     ;; `(underline ((t ())))
     ;; `(variable-pitch ((t ())))
     ;; `(vc-conflict-state ((t ())))
     ;; `(vc-edited-state ((t ())))
     ;; `(vc-locally-added-state ((t ())))
     ;; `(vc-locked-state ((t ())))
     ;; `(vc-missing-state ((t ())))
     ;; `(vc-needs-update-state ((t ())))
     ;; `(vc-removed-state ((t ())))
     ;; `(vc-state-base ((t ())))
     ;; `(vc-up-to-date-state ((t ())))
     ;; `(vertical-border ((t ())))
     ;; `(warning ((t ())))
     ;; `(widget-button ((t ())))
     ;; `(widget-button-pressed ((t ())))
     ;; `(widget-documentation ((t ())))
     ;; `(widget-field ((t ())))
     ;; `(widget-inactive ((t ())))
     ;; `(widget-single-line-field ((t ())))
     ;; `(window-divider ((t ())))
     ;; `(window-divider-first-pixel ((t ())))
     ;; `(window-divider-last-pixel ((t ())))
     ;; `(yas--field-debug-face ((t ())))
     ;; `(yas-field-highlight-face ((t ())))))
)))




(defun init/setup-faces ()
  "After we're done loading Emacs, setup our fonts."
  (interactive)

  (init/set-my-faces)

  (init/safe-set-face-font 'variable-pitch "Symbola" 14)
  (init/safe-set-face-font 'interface-variable-pitch "Inter UI" 12)

  (when (member "Noto Color Emoji" (font-family-list))
    (set-fontset-font t 'unicode "Noto Color Emoji" nil 'prepend))

  (when (member "Apple Color Emoji" (font-family-list))
    (set-fontset-font t 'unicode "Apple Color Emoji" nil 'prepend)))

(add-hook 'after-init-hook #'init/setup-faces)

(provide '00-faces)
;;; 00-faces.el ends here
